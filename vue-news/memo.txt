[ cli 2.x vs 3.x ]
2. 중급강의까지는 cli 2.x
3. 완벽가이드 부터는 cli 3.x

- 명령어
  : 프로젝트 생성
  cli 2.x ==> vue init 프로젝트 명
  cli 3.x ==> vue create 프로젝트 명
  * 3 버전 부터는 ESLint, webpack 등 기타 플러그인이 같이 추가 된다.

- 웹팩 설정 파일
  cli 2.x ==> 노출 O
  cli 3.x ==> 노출 X

- 프로젝트 구성
  cli 2.x ==> 깃헙의 템플릿 다운로드
  cli 3.x ==> 플러그인 기반으로 기능 추가

- ES6 이해도
  cli 2.x ==> 필요 X
  cli 3.x ==> 필요 O

=======================
[ ES6 ]

 - Destructuring(디스트럭처링)
   : 객체 구조( structure )를 제거( de ) 한다는 의미
     구조화된 배열 또는 객체를 비구조화하여 1개 이상의 변수에 개별적으로 할당하는 것.

   자료형에 따라 다음과 같은 방식으로 나뉜다.
   1. 객체 디스트럭처링
   2. 배열 디스트럭처링

   *자세한 내용은 참고URL: https://velog.io/@seongkyun/%EB%94%94%EC%8A%A4%ED%8A%B8%EB%9F%AD%EC%B2%98%EB%A7%81-%ED%95%A0%EB%8B%B9


=======================
[ ESLint ]
: 자바스크립트 문법에서 에러를 표시해주는 도구
* cli 3 버전일 경우 추가 설치는 필요 없고, 사용하는 툴에서 ESLint 설정만 해두기

=======================
[ vue-router ]
: vue에서 라우팅 기능을 구현할 수 있도록 지원하는 공식 라이브러리
  * 라우팅: 웹 페이지간의 이동 방법, 라우팅을 이용하면 화면간의 전환을 매끄럽게 할 수 있음.
    (뷰, 리액트, 앵귤러 모두 라우팅을 이용하여 화면 전환을 한다.)

npm i vue-router@3.5.3 --save
* 설치 확인 방법: package.json > dependencies 에 vue-router 포함 여부 확인
* dependencies 란? 앱을 배포할 때 반드시 포함되어 있어야하는 라이브러리 목록

// index.js, main.js, App.vue 에서
// router 기능 추가 후 페이지 매핑 오류가 발생할 경우
// 아래 명령어를 통하여 라우터 재설치.
npm i vue-router@next

=======================
[ HNPWA API ]

 [ Item feeds ]
 - News: https://api.hnpwa.com/v0/news/1.json
 - Newest: https://api.hnpwa.com/v0/newest/1.json
 - Ask: https://api.hnpwa.com/v0/ask/1.json
 - Show: https://api.hnpwa.com/v0/show/1.json
 - Jobs: https://api.hnpwa.com/v0/jobs/1.json
 - Item: https://api.hnpwa.com/v0/item/16493489.json
 - User: https://api.hnpwa.com/v0/user/davideast.json
         https://api.hnpwa.com/v0/user/cristianbote.json
         https://jsonplaceholder.typicode.com/users

=======================
 [ Vue Axios ]

 npm install --save axios
// 설치 후 main.js 에 mount 하기 전 config 설정
// 설정하는 이유?
// axios를 Vue 프로젝트에서 전역으로 사용하기 위해(app.config 는 전역으로 사용하는 설정 객체이다.)
// app.config.globalProperties.axios = axios;

=======================
[ this 개념과 바인딩 원리 ]
(*참고 URL: https://imsoncod.tistory.com/21
           https://velog.io/@danmin20/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-this-%EB%B0%94%EC%9D%B8%EB%94%A9%EC%9D%B4%EB%9E%80)

바인딩(binding) 종류
1. default
   : 기본적으로 this는 전역객체를 가리킨다.
     node환경에서는 global 객체를, 브라우저에서는 window 객체를 가리킨다.

2. 일반 함수 내부
   : 일반적인 함수 내부에서 this를 호출하면 전역객체를 가리키는데,
     strict 모드를 사용하는 경우에는 그렇지 않다.(undefined 반환)
     즉시 실행함수의 경우에도 마찬가지이다.

3. 객체의 메소드 내부
   : 객체 내부의 메소드 내부에서 this를 호출하면 해당 객체를 가리킨다.

4. 생성자 함수 내부
   : new 연산자로 생성자 함수를 호출할 때, 생성자 함수 내부에서 호출된 this는 생성자 함수를 통해 새로 생성되어 반환되는 객체를 가리킨다.

=======================
[ ajax ]
 : 자바스크립트를 이용해서 비동기적(Asynchronous)으로 서버와 브라우저가 데이터를 교환할 수 있는 통신 방식을 의미.
   Ajax을 위한 데이터 형식은 JSON(JavaScript Object Notation)을 사용하는 것이 일반적이다.

 callback.html
 promise.html
 실습 자료 참고

=======================
[ jQuery ]
: javascript 기반으로 만들어진 라이브러리

https://releases.jquery.com/

2022-03-04 기준 가장 최신 버전: jQuery Core 3.6.0 - uncompressed

=======================
[ JSON ]
 : Ajax 요청에 대한 서버의 응답은 주로 HTML, XML, JSON이 사용된다. 이 중 가장 일반적인 데이터 형식은 JSON(JavaScript Object Notation)이다.

=======================
[ Vuex ]
 : 상태(state)를 관리하는 라이브러리
   즉, Vue.js 애플리케이션에 대한 상태 관리 패턴 + 라이브러리
   * 상태란? 컴포넌트 간 공유할 수 있는 데이터
   * 참고URL: https://doozi0316.tistory.com/entry/Vuex-%EA%B0%9C%EB%85%90%EA%B3%BC-%EC%98%88%EC%A0%9C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0
             https://velog.io/@jtwjs/Vuex%EB%9E%80

 - Vuex 구조 이해(Action ~ state 구간이 Vuex 구조)
   구조: Vue Components ==(Dispatch)==> Actions ==(Commit)==> Mutations
                       ==(Mutate)==> State ==(Render)==> Vue Components ...
   * 단방향 순환

   Vuex 적용 흐름 [[[  API  -->  Vuex(actions >> mutations >> state)  --> view  ]]]
   // Vue3 에서 ★Vuex3 버전★ 이용할 경우와   ★Vuex4 버전★ 이용할 경우 Store 연결하는 방법이 다르니 참고해야한다.
   * 적용 관련 참고URL: https://kyounghwan01.github.io/blog/Vue/vue3/composition-api-vuex/#vuex-%E1%84%89%E1%85%A6%E1%84%90%E1%85%B5%E1%86%BC-%E1%84%86%E1%85%B5%E1%86%BE-store-module-1%E1%84%80%E1%85%A2%E1%84%85%E1%85%A9-%E1%84%89%E1%85%B5%E1%86%AF%E1%84%92%E1%85%A2%E1%86%BC

 - 설치 방법
  npm install vuex@next --save

=======================
[ Mitt ]
 : 형제나 부모의 부모등 (연관없는 컴포넌트 포함) 여러 방향으로 데이터 전달 하는 방법
   커스텀 이벤트를 만들어 송출, 수신할수있게해주는 라이브러리
   *프로젝트가 거대해질 경우 Vuex를 쓰는게 유비보수에 좋다.
   *설치: npm i mitt --save

=======================
[ Font Awesome ]
설치 방법
 1. CDN 설치
 : CDN을 삽입하여 아이콘을 특정 클래스명으로 호출하여 사용하는 방법
   * CDN 삽입 위치: public > index.html (<head> 태그 사이에 넣으면 된다, 최신 버전을 이용하고 싶을 경우 버전 확인 필요!)
   * CDN 코드: <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css" integrity="sha384-DyZ88mC6Up2uqS4h/KRgHuoeGwBcD4Ng9SiP4dIRy0EXTlnuz47vAwmeGwVChigm" crossorigin="anonymous">

 2. 라이브러리 설치
 : npm 을 이용하여 라이브러리 추가(핵심 패키지, 아이콘 콘텐츠 설치)
 $ npm i --save @fortawesome/vue-fontawesome@prerelease
 $ npm i --save @fortawesome/fontawesome-svg-core
 $ npm i --save @fortawesome/free-solid-svg-icons
 $ npm i --save @fortawesome/free-regular-svg-icons
 $ npm i --save @fortawesome/free-brands-svg-icons
 * main.js 에서 아이콘을 불러와야한다.
 * 참고 URL: https://fontawesome.com/docs/web/style/size

=======================
[ Vue의 속성 ]
 * 참고 URL: https://tothefullest08.github.io/javascript/2019/07/04/VUE04-attributes/
            https://jocoma.tistory.com/entry/Vue%EC%9D%98-template%EC%86%8D%EC%84%B1

=======================
[ slot ]
: vue에서 slot은 자식컴포넌트의 엘리먼트를 부모에게 지정할 때 사용한다.
  또한 컴포넌트의 재사용성을 높여주는 기능이 있다.

  1) named-slot: 이름이 있는 슬롯
  2) slot-scope: 범위를 가지는 슬롯

  그러나 Vue2.6 버전부터 v-slot 문법이 생기면서
  위 두가지 속성은 사라질 예정이며, v-slot 사용을 권장한다.
  * Vue3 버전부터는 공식적으로 삭제.
  * v-slot:name 을 통해 name에 맞는 slot을 꺼내 사용할 수 있다.
  * v-slot은 template 태그에만 추가하여 사용할 수 있다.
  * 사용 예)
    <base-layout>
      <!-- 사용 방법1. v-slot:슬롯명 -->
      <template v-slot:header>
        <!-- 재정의 구간 -->
      </template>

      <!-- 사용 방법2. #슬롯명 --> <!-- 축약 문법 -->
      <template #footer>
        <!-- 재정의 구간 -->
      </template>
    </base-layout>