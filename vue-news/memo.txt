[ cli 2.x vs 3.x ]
2. 중급강의까지는 cli 2.x
3. 완벽가이드 부터는 cli 3.x

- 명령어
  : 프로젝트 생성
  cli 2.x ==> vue init 프로젝트 명
  cli 3.x ==> vue create 프로젝트 명
  * 3 버전 부터는 ESLint, webpack 등 기타 플러그인이 같이 추가 된다.

- 웹팩 설정 파일
  cli 2.x ==> 노출 O
  cli 3.x ==> 노출 X

- 프로젝트 구성
  cli 2.x ==> 깃헙의 템플릿 다운로드
  cli 3.x ==> 플러그인 기반으로 기능 추가

- ES6 이해도
  cli 2.x ==> 필요 X
  cli 3.x ==> 필요 O

=======================
[ ESLint ]
: 자바스크립트 문법에서 에러를 표시해주는 도구
* cli 3 버전일 경우 추가 설치는 필요 없고, 사용하는 툴에서 ESLint 설정만 해두기

=======================
[ vue-router ]
: vue에서 라우팅 기능을 구현할 수 있도록 지원하는 공식 라이브러리
  * 라우팅: 웹 페이지간의 이동 방법, 라우팅을 이용하면 화면간의 전환을 매끄럽게 할 수 있음.
    (뷰, 리액트, 앵귤러 모두 라우팅을 이용하여 화면 전환을 한다.)

npm i vue-router@3.5.3 --save
* 설치 확인 방법: package.json > dependencies 에 vue-router 포함 여부 확인
* dependencies 란? 앱을 배포할 때 반드시 포함되어 있어야하는 라이브러리 목록

// index.js, main.js, App.vue 에서
// router 기능 추가 후 페이지 매핑 오류가 발생할 경우
// 아래 명령어를 통하여 라우터 재설치.
npm i vue-router@next

=======================
HNPWA API

 [ Item feeds ]
 - News: https://api.hnpwa.com/v0/news/1.json
 - Newest: https://api.hnpwa.com/v0/newest/1.json
 - Ask: https://api.hnpwa.com/v0/ask/1.json
 - Show: https://api.hnpwa.com/v0/show/1.json
 - Jobs: https://api.hnpwa.com/v0/jobs/1.json
 - Item: https://api.hnpwa.com/v0/item/16493489.json
 - User: https://api.hnpwa.com/v0/user/davideast.json
         https://api.hnpwa.com/v0/user/cristianbote.json

=======================
 Vue Axios

 npm install --save axios
// 설치 후 main.js 에 mount 하기 전 config 설정
// 설정하는 이유?
// axios를 Vue 프로젝트에서 전역으로 사용하기 위해(app.config 는 전역으로 사용하는 설정 객체이다.)
// app.config.globalProperties.axios = axios;

=======================
this 개념과 바인딩 원리 (*참고 URL: https://imsoncod.tistory.com/21
https://velog.io/@danmin20/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-this-%EB%B0%94%EC%9D%B8%EB%94%A9%EC%9D%B4%EB%9E%80)

바인딩(binding) 종류
1. default
   : 기본적으로 this는 전역객체를 가리킨다.
     node환경에서는 global 객체를, 브라우저에서는 window 객체를 가리킨다.

2. 일반 함수 내부
   : 일반적인 함수 내부에서 this를 호출하면 전역객체를 가리키는데,
     strict 모드를 사용하는 경우에는 그렇지 않다.(undefined 반환)
     즉시 실행함수의 경우에도 마찬가지이다.

3. 객체의 메소드 내부
   : 객체 내부의 메소드 내부에서 this를 호출하면 해당 객체를 가리킨다.

   예1) 메소드 내부의 함수 내부에서 호출할 경우
   -----------------------------------------
   var obj = {
       print: function() {
         console.log(this); // obj 객체

         var print2 = function() {
           console.log(this); // window 객체
         }
         print2();
      }
   }
   -----------------------------------------

4. 생성자 함수 내부