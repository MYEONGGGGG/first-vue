[ 프로젝트 구조 ]
● node_modules : package.json에 종속되어있는 라이브러리들
● public : webpack의 처리를 받지않고 퍼블리싱되는 정적 자산을 포함하는 폴더 (static assets)
● src : 애플리케이션 디렉토리
● src\assets : css나 img 등의 정적 자산을 저장하는 폴더, webpack의 처리를 받을 수 있어 css-pre processor 사용 가능
● src\components : 컴포넌트를 담는 폴더
● src\router : Vue Router 관련 폴더
● src\store : Vuex 관련 폴더
● src\views : 라우터 페이지가 관련 폴더
● src\App.vue : 프로젝트 최상위 컴포넌트 파일
● src\main.ts : 프로젝트의 entry ts 파일
● src\shims-vue.d.ts : TypeScript가 vue파일의 component가 어떠한 인터페이스인지를 정의하여 import할 수 있게 한다.
● .eslintrc.js : ESLint 설정 파일
● .gitignore : git 규칙 설정 파일
● babel.config.js
● package.json
● package-lock.json
● tsconfig.json

=======================
[ Vue 3 Project Style Guide ]
스타일 가이드 공식문서 : https://v3.vuejs.org/style-guide/

=======================
[ Vue ]
 - vue 버전은 프로젝트 생성할 때 선택할 수 있다.

 - 구조
 Vue 컴포넌트의 파일 확장자는 ".vue"입니다.
 Vue 컴포넌트는 <template>, <script>, <style>로 구분되어 있습니다.
 - <template>은 Vue 컴포넌트에서 사용할 HTML입니다.
 - <script>는 Vue 컴포넌트에서 처리할 javascript입니다.
 - <style>은 <template>에 있는 element에 대한 css입니다


 - 뷰인스턴스
 el: 인스턴스가 그려지는 화면의 시작점
 template: 화면에 표시할 요소
 data: 컴포넌트에서 사용할 데이터들을 설정
 method: 화면의 동작과 이벤트 로직을 제어하는 메소드
 created: 뷰의 라이프사이클과 관련된 속성
          * 뷰 인스턴스 라이프 사이클:
            인스턴스 생성
            -> 인스턴스를 화면에 부착
            -> 인스턴스 내용 갱신
            -> 인스턴스 소멸
 watch: data에서 정의한 속성이 변화했을 때 추가 동작을 수행할 수 있게 정의하는 속성
 computed: 컴포넌트에서 data들이 변화면 자동 처리되는 메소드를 설정
 name: 상위 컴포넌트에서 사용할 수 있게 이름을 설정(필수는 아님)
 components: 컴포넌트에서 사용하고 있는 컴포넌트들을 설정
 props: 상위 컴포넌트로 부터 데이터를 전달받을 수 있게 이름과 타입을 설정
 setup : 컴포넌트에서 사용할 데이터들은 state로 설정하고 메서드들을 설정(Vue 2에서 사용되는 data, method가 setup으로 변경) - Vue 3

 * 참고: https://mkil.tistory.com/515
        https://jess2.xyz/vue/vue-tip/
=======================
[ Vue CLI ]
: 기본 vue 개발 환경을 설정해주는 도구이며 npm으로(node.js 프로젝트 매니저) 원하는 버전의 cli를 설치할 수 있다.
  *CLI : 명령 줄 인터페이스(Command line interface) 로 터미널을 통해 사용자와 컴퓨터가 상호작용하는 방식

=======================
[ Webpack ]
 : 웹팩은 프로젝트의 구조를 분석하고 자바스크립트 모듈을 비롯한 관련 리소스들을 찾은 다음 이를 브라우저에서 이용할 수 있는 번들로 묶고
   패킹하는 모듈 번들러(Module bundler)다.
   (vue 파일을 웹 브라우저가 인식할 수 있는 형태의 파일로 변환)

=======================
[export default]: 파일 전체를 export
 ==> import  방법
     : 이름을 마음대로 정할 수 있다.
--> import Test1 from '../../...'
--> import Test2 from '../../...'
--> import Test3 from '../../...'

[export 변수]: 해당 변수만 export
 ==> import  방법
    : 해당 변수명을 중괄호로 감싸서 그대로 가져와야 한다.
--> import { 변수명 } from '../../...'

[ new Vue 와 export default 차이점 ]
 : new Vue를 통해 선언하게 되면 보통 앱의 나머지들에게 상속해주는 Root Vue Instance를 생성할 때 사용.

  export default를 사용하면 언제든지 등록할 수 있고, 또 나중에 재사용할 수 있는 단일파일 컴포넌트를 만들어줄 때 사용.
  그렇게 생성된 단일파일 컴포넌트는 다른 컴포넌트 안에서 재사용할 수도 있다.

[ Method와 Computed와 차이점 ]
 : computed는 computed value는 computed property가 더 정확한 표현
   Vue가 초기화되었을 때, computed property들은 Vue의 'Vue property'로 변환된다.

   computed property는 값이 변경되지 않았을 때 반복해서 계산할 필요없이 캐시해둔다.
   그러나 메서드는 Vue 인스턴스에 바인딩된 함수로, 호출될 때만 평가합니다.
   그렇기 때문에 computed property로 표현할 수 있는 것을 함수를 사용할 필요는 없습니다.

=======================
[ cli 2.x vs 3.x ]
2. 중급강의까지는 cli 2.x
3. 완벽가이드 부터는 cli 3.x

- 명령어
  : 프로젝트 생성
  cli 2.x ==> vue init 프로젝트 명
  cli 3.x ==> vue create 프로젝트 명
  * 3 버전 부터는 ESLint, webpack 등 기타 플러그인이 같이 추가 된다.

- 웹팩 설정 파일
  cli 2.x ==> 노출 O
  cli 3.x ==> 노출 X

- 프로젝트 구성
  cli 2.x ==> 깃헙의 템플릿 다운로드
  cli 3.x ==> 플러그인 기반으로 기능 추가

- ES6 이해도
  cli 2.x ==> 필요 X
  cli 3.x ==> 필요 O

  *참고: https://velog.io/@kdeun1/Vue-3-Composition-API-TypeScript-Vuex-4%EB%A1%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0

=======================
[ ES6 ]

 - Destructuring(디스트럭처링)
   : 객체 구조( structure )를 제거( de ) 한다는 의미
     구조화된 배열 또는 객체를 비구조화하여 1개 이상의 변수에 개별적으로 할당하는 것.

   자료형에 따라 다음과 같은 방식으로 나뉜다.
   1. 객체 디스트럭처링
   2. 배열 디스트럭처링

   *자세한 내용은 참고URL: https://velog.io/@seongkyun/%EB%94%94%EC%8A%A4%ED%8A%B8%EB%9F%AD%EC%B2%98%EB%A7%81-%ED%95%A0%EB%8B%B9


=======================
[ ESLint ]
: 자바스크립트 문법에서 에러를 표시해주는 도구
* cli 3 버전일 경우 추가 설치는 필요 없고, 사용하는 툴에서 ESLint 설정만 해두기

=======================
[ vue-router ]
: vue에서 라우팅 기능을 구현할 수 있도록 지원하는 공식 라이브러리
  * 라우팅: 웹 페이지간의 이동 방법, 라우팅을 이용하면 화면간의 전환을 매끄럽게 할 수 있음.
    (뷰, 리액트, 앵귤러 모두 라우팅을 이용하여 화면 전환을 한다.)

npm i vue-router@3.5.3 --save
* 설치 확인 방법: package.json > dependencies 에 vue-router 포함 여부 확인
* dependencies 란? 앱을 배포할 때 반드시 포함되어 있어야하는 라이브러리 목록

// index.js, main.js, App.vue 에서
// router 기능 추가 후 페이지 매핑 오류가 발생할 경우
// 아래 명령어를 통하여 라우터 재설치.
npm i vue-router@next

=======================
[ HNPWA API ]

 [ Item feeds ]
 - News: https://api.hnpwa.com/v0/news/1.json
 - Newest: https://api.hnpwa.com/v0/newest/1.json
 - Ask: https://api.hnpwa.com/v0/ask/1.json
 - Show: https://api.hnpwa.com/v0/show/1.json
 - Jobs: https://api.hnpwa.com/v0/jobs/1.json
 - Item: https://api.hnpwa.com/v0/item/16493489.json
 - User: https://api.hnpwa.com/v0/user/davideast.json
         https://api.hnpwa.com/v0/user/cristianbote.json
         https://jsonplaceholder.typicode.com/users

=======================
[ Axios ]

 npm install --save axios
// 설치 후 main.js 에 mount 하기 전 config 설정
// 설정하는 이유?
// axios를 Vue 프로젝트에서 전역으로 사용하기 위해(app.config 는 전역으로 사용하는 설정 객체이다.)
// app.config.globalProperties.axios = axios;

=======================
[ this 개념과 바인딩 원리 ]
(*참고 URL: https://imsoncod.tistory.com/21
           https://velog.io/@danmin20/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-this-%EB%B0%94%EC%9D%B8%EB%94%A9%EC%9D%B4%EB%9E%80)

바인딩(binding) 종류
1. default
   : 기본적으로 this는 전역객체를 가리킨다.
     node환경에서는 global 객체를, 브라우저에서는 window 객체를 가리킨다.

2. 일반 함수 내부
   : 일반적인 함수 내부에서 this를 호출하면 전역객체를 가리키는데,
     strict 모드를 사용하는 경우에는 그렇지 않다.(undefined 반환)
     즉시 실행함수의 경우에도 마찬가지이다.

3. 객체의 메소드 내부
   : 객체 내부의 메소드 내부에서 this를 호출하면 해당 객체를 가리킨다.

4. 생성자 함수 내부
   : new 연산자로 생성자 함수를 호출할 때, 생성자 함수 내부에서 호출된 this는 생성자 함수를 통해 새로 생성되어 반환되는 객체를 가리킨다.

=======================
[ ajax ]
 : 자바스크립트를 이용해서 비동기적(Asynchronous)으로 서버와 브라우저가 데이터를 교환할 수 있는 통신 방식을 의미.
   Ajax을 위한 데이터 형식은 JSON(JavaScript Object Notation)을 사용하는 것이 일반적이다.

 callback.html
 promise.html
 실습 자료 참고

=======================
[ jQuery ]
: javascript 기반으로 만들어진 라이브러리

https://releases.jquery.com/

2022-03-04 기준 가장 최신 버전: jQuery Core 3.6.0 - uncompressed

=======================
[ JSON ]
 : Ajax 요청에 대한 서버의 응답은 주로 HTML, XML, JSON이 사용된다. 이 중 가장 일반적인 데이터 형식은 JSON(JavaScript Object Notation)이다.

=======================
[ Vuex ]
 : 상태(state)를 관리하는 라이브러리
   즉, Vue.js 애플리케이션에 대한 상태 관리 패턴 + 라이브러리
   * 상태란? 컴포넌트 간 공유할 수 있는 데이터
   * 참고URL: https://doozi0316.tistory.com/entry/Vuex-%EA%B0%9C%EB%85%90%EA%B3%BC-%EC%98%88%EC%A0%9C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0
             https://velog.io/@jtwjs/Vuex%EB%9E%80

 - Vuex 구조 이해(Action ~ state 구간이 Vuex 구조)
   구조: Vue Components ==(Dispatch)==> Actions ==(Commit)==> Mutations
                       ==(Mutate)==> State ==(Render)==> Vue Components ...
   * 단방향 순환

   Vuex 적용 흐름 [[[  API  -->  Vuex(actions >> mutations >> state)  --> view  ]]]
   // Vue3 에서 ★Vuex3 버전★ 이용할 경우와   ★Vuex4 버전★ 이용할 경우 Store 연결하는 방법이 다르니 참고해야한다.
   * 적용 관련 참고URL: https://kyounghwan01.github.io/blog/Vue/vue3/composition-api-vuex/#vuex-%E1%84%89%E1%85%A6%E1%84%90%E1%85%B5%E1%86%BC-%E1%84%86%E1%85%B5%E1%86%BE-store-module-1%E1%84%80%E1%85%A2%E1%84%85%E1%85%A9-%E1%84%89%E1%85%B5%E1%86%AF%E1%84%92%E1%85%A2%E1%86%BC

 - 설치 방법
  npm install vuex@next --save

=======================
[ Mitt ]
 : 형제나 부모의 부모등 (연관없는 컴포넌트 포함) 여러 방향으로 데이터 전달 하는 방법
   커스텀 이벤트를 만들어 송출, 수신할수있게해주는 라이브러리
   *프로젝트가 거대해질 경우 Vuex를 쓰는게 유비보수에 좋다.
   *설치: npm i mitt --save

=======================
[ Font Awesome ]
설치 방법
 1. CDN 설치
 : CDN을 삽입하여 아이콘을 특정 클래스명으로 호출하여 사용하는 방법
   * CDN 삽입 위치: public > index.html (<head> 태그 사이에 넣으면 된다, 최신 버전을 이용하고 싶을 경우 버전 확인 필요!)
   * CDN 코드: <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css" integrity="sha384-DyZ88mC6Up2uqS4h/KRgHuoeGwBcD4Ng9SiP4dIRy0EXTlnuz47vAwmeGwVChigm" crossorigin="anonymous">

 2. 라이브러리 설치
 : npm 을 이용하여 라이브러리 추가(핵심 패키지, 아이콘 콘텐츠 설치)
 $ npm i --save @fortawesome/vue-fontawesome@prerelease
 $ npm i --save @fortawesome/fontawesome-svg-core
 $ npm i --save @fortawesome/free-solid-svg-icons
 $ npm i --save @fortawesome/free-regular-svg-icons
 $ npm i --save @fortawesome/free-brands-svg-icons
 * main.js 에서 아이콘을 불러와야한다.
 * 참고 URL: https://fontawesome.com/docs/web/style/size

=======================
[ Vue의 속성 ]
 * 참고 URL: https://tothefullest08.github.io/javascript/2019/07/04/VUE04-attributes/
            https://jocoma.tistory.com/entry/Vue%EC%9D%98-template%EC%86%8D%EC%84%B1

=======================
[ slot ]
: vue에서 slot은 자식컴포넌트의 엘리먼트를 부모에게 지정할 때 사용한다.
  또한 컴포넌트의 재사용성을 높여주는 기능이 있다.

  1) named-slot: 이름이 있는 슬롯
  2) slot-scope: 범위를 가지는 슬롯

  그러나 Vue2.6 버전부터 v-slot 문법이 생기면서
  위 두가지 속성은 사라질 예정이며, v-slot 사용을 권장한다.
  * Vue3 버전부터는 공식적으로 삭제.
  * v-slot:name 을 통해 name에 맞는 slot을 꺼내 사용할 수 있다.
  * v-slot은 template 태그에만 추가하여 사용할 수 있다.
  * 사용 예)
    <base-layout>
      <!-- 사용 방법1. v-slot:슬롯명 -->
      <template v-slot:header>
        <!-- 재정의 구간 -->
      </template>

      <!-- 사용 방법2. #슬롯명 --> <!-- 축약 문법 -->
      <template #footer>
        <!-- 재정의 구간 -->
      </template>
    </base-layout>

=======================
[ npm error ]
vue-cli-service: command not found. 또는
vue-cli-service is not recognized as an internal or external command.
같은 오류가 발생할 경우

방법1.
   npm i vue-cli-service
   npm i -g vue-cli-service
   를 이용하여 vue-cli-service 재설치

방법2.
   npm uninstall vue-cil -g
   npm install -g @vue/cli

방법3.
   node_modules 폴더 삭제
   npm i

방법 1~3 중 선택하여 진행하고 성공한다면 재기동을 통하여 확인.

=======================
[ Vue3의 Vue 라이프 사이클 후크에 대한 완전한 가이드 ]
* 참고: https://ichi.pro/ko/vue3ui-vue-laipeu-saikeul-hukeue-daehan-wanjeonhan-gaideu-61992878486458

onBeforeMount -장착이 시작되기 전에 호출 됨
onMounted -컴포넌트가 마운트 될 때 호출됩니다.
onBeforeUpdate -반응 형 데이터가 변경 될 때와 다시 렌더링하기 전에 호출됩니다.
onUpdated -다시 렌더링 후 호출
onBeforeUnmount -Vue 인스턴스가 파괴되기 전에 호출됩니다.
onUnmounted -인스턴스가 파괴 된 후 호출됩니다.
onActivated -연결 유지 구성 요소가 활성화되면 호출됩니다.
onDeactivated -연결 유지 구성 요소가 비활성화 될 때 호출됩니다.
onErrorCaptured -하위 구성 요소에서 오류가 캡처 될 때 호출됩니다.

*Vue2 -> Vue3 라이프 사이클 변경 내용
beforeCreate -> 사용 setup()
created -> 사용 setup()
beforeMount -> BeforeMount
mounted -> Mounted
beforeUpdate -> BeforeUpdate
updated -> Updated
beforeDestroy -> BeforeUnmount
destroyed -> Unmounted
errorCaptured -> ErrorCaptured

=======================
[ 하이 오더 컴포넌트(HOC)와 믹스인(Mixin)의 차이 ]

○ HOC
  : 일반적으로 HOC를 이용하여 컴포넌트를 구성하게 되면 컴포넌트 관계에서 층이 하나 더 생긴다.
    - 일반: 상위 - 하위
    - HOC: 상위 - HOC - 하위
    이처럼 HOC를 이용하여 개발 시 상,하위 컴포넌트의 로직을 수정하지 않고 기능을 확장해 나갈 수 있다.
    그렇지만 HOC를 이용하면 컴포넌트 레이어를 복잡하게 만들어 컴포넌트간 주고받을 코드가 많아지게 된다.

○ Mixin
  : HOC 처럼 추가적인 컴포넌트가 생기지 않아 상대적으로 문법이 어렵지 않고 입문자에게 어려운 HOC의 사고 방식이 필요하지 않다.
    하지만 컴포넌트 기능 테스트 측면에서는 HOC에 비해 기능 분리가 되어있지 않아 어렵다.

○ 구조(형식) 차이
  // HOC
  export default function create() {
   // 재사용할 컴포넌트 옵션
  }

  // Mixin
  export default {
   // 재사용할 컴포넌트 옵션 & 로직
  }

=======================
[ 데이터 호출 시점 ]
1. 라우터 네비게이션 가드(vue-router Navigation Guard)
   : 특정 URL로 접근하기 전의 동작을 정의하는 속성(함수)

   - 전역가드(beforeEach)
     모든 라우터 객체에 가드를 적용합니다.
     어떤 라우트가 발생했는지 알기 위해서는 아래 세가지 인자를 전달받아 확인한다.
     . to: to 에 해당하는 라우트 객체로 다음에 이동
     . from: 현재 라우터로 오기 이전의 라우트
     . next: 훅을 해결하기 위해 호출된다. 동작 방식은 next에 전달하는 인자에 따라 달라진다.
       *next() 함수의 경우 호출되지 않으면 훅이 절대 불러지지 않으므로 반드시 가드 내에서 호출해야한다.

   - 라우트 별 가드(beforeEnter)
     라우트 객체에 직접 정의하여 해당 라우트가 발생하기 이전에 원하는 로직을 처리할 수 있다.

   - 컴포넌트 내부 가드(beforeRouteEnter, beforeRouteUpdate, beforeRouteLeave)
     컴포넌트 내부에서 네이게이션 가드를 설정할 수 있다.

2. 라이프사이클 훅(lifecycle hooks)
   : 라이프사이클이란 Vue 인스턴스나 컴포넌트가 생성되고 소멸되기까지의 단계를 말하며 각 단계에서 실행되는 함수들을 라이프사이클 훅이라한다.

     1) Creation : 컴포넌트 초기화 단계
     2) Mounting : DOM 삽입 단계
     3) Updating : Diff 및 Re-rendering 단계
     4) Destruction : 해체 단계
     5) 그 외 hooks

     *참고: https://velog.io/@yeyo0x0/Vue.js-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4-%ED%9B%85